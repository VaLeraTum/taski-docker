name: Main Taski workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt 
    - name: Test with flake8 and django tests
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: django_password
        POSTGRES_DB: django_db
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        python -m flake8 backend/
        cd backend/
        python manage.py test 
  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/taski_backend:latest
  frontend_tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up nodeJS
      uses: actions/setup-node@v3
      with:
        node-version: 18
    - name: Install dependencies
      run: |
        cd frontend/
        npm ci
    - name: Test frontend
      run: |
        cd frontend/
        npm run test
  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/taski_frontend:latest
  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/taski_gateway:latest
  deploy:
    runs-on: ubuntu-latest
    needs: 
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: 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
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.production.yml"
        target: "taski"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd taski
          sudo docker compose -f docker-compose.production.yml pull
          sudo docker compose -f docker-compose.production.yml down
          sudo docker compose -f docker-compose.production.yml up -d
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
          sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Деплой успешно выполнен!